" {{ ansible_managed }} "

set nocompatible
filetype off

set encoding=utf-8
set title                " change the terminal's title
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set hidden " Enable open new buffer without the need to save current buffer

" Paste mode
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

let python_highlight_all=1
syntax on

" vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Base plugins

Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'davidhalter/jedi-vim'
Plugin 'chase/vim-ansible-yaml'

" Extra plugins
{% for plugin in vim_plugins %}
Plugin '{{ plugin }}'
{% endfor %}

call vundle#end()

filetype plugin indent on

" Powerline setup
set guifont=Source\ Code\ Pro\ for\ Powerline\ Semibold\ 14
set laststatus=2

" NerdTree
map <F3> :NERDTreeToggle<CR>

" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint ( g:pymode_breakpoint enabled )
" [[            Jump on previous class or function ( normal, visual, operator modes )
" ]]            Jump on next class or function ( normal, visual, operator modes )
" [M            Jump on previous class or method ( normal, visual, operator modes )
" ]M            Jump on next class or method ( normal, visual, operator modes )
let g:pymode_rope = 1

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

autocmd FileType * set tabstop=4|set shiftwidth=4|set softtabstop=4|set expandtab

" PEP8 identation python files
au BufNewFile,BufRead *.py:
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Enable autocomplete
let g:neocomplete#enable_at_startup = 1

" Cleanup files from spaces, tabs etc
" Show tabs and trailing spaces so I can remove them
set list
set listchars=tab:»·,trail:·,extends:#

" Remove trailing spaces
function! RemoveTrailingSpaces()
  %s/\s\+$//e
endfunction

function! RemoveTrailingEndOfLines()
  %s/
\+$//e
endfunction

" Convert tabs to spaces
function! ConvertTabsToSpaces()
  %retab
endfunction

function! PutSpacesForFunctions()
  %s/\zs(\ze\(\'\|\"\|\w\)/(\ /ge
  %s/\(\w\|\'\|\"\|\]\|)\)\zs )\ze/ )/ge
endfunction

function! CleanFile()
  call ConvertTabsToSpaces()
  call RemoveTrailingSpaces()
  call RemoveTrailingEndOfLines()
"  call PutSpacesForFunctions()
endfunction

" Key binding F5 to clean up file
nnoremap <silent> <F5> :let _s=@/<Bar>:call CleanFile()<CR>

" bind Alt+<arrows> keys to move around buffers
noremap <a-Left> :bp<CR>
noremap <a-Right> :bn<CR>

" Neocomplete config
" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" If you prefer the Omni-Completion tip window to close when a selection is
" made, these lines close it on movement in insert mode or when leaving
" insert mode

" For vim 7.4+
autocmd CompleteDone * if pumvisible() == 0|pclose|endif

" For older versions
" autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
" autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

source ~/.vim/config/*.vim
